// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, phone_number) VALUES ($1, $2)
`

type CreateUserParams struct {
	Name        pgtype.Text
	PhoneNumber pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Name, arg.PhoneNumber)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, phone_number, otp, otp_expiry_time FROM users WHERE id = $1
`

// queries.sql
func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpiryTime,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, name, phone_number, otp, otp_expiry_time FROM users WHERE phone_number = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpiryTime,
	)
	return i, err
}

const updateOtp = `-- name: UpdateOtp :exec
UPDATE users SET otp = $2, otp_expiry_time = $3
WHERE id = $1
`

type UpdateOtpParams struct {
	ID            int64
	Otp           pgtype.Text
	OtpExpiryTime pgtype.Timestamp
}

func (q *Queries) UpdateOtp(ctx context.Context, arg UpdateOtpParams) error {
	_, err := q.db.Exec(ctx, updateOtp, arg.ID, arg.Otp, arg.OtpExpiryTime)
	return err
}
